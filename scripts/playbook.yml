# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Rebuild and start Cassandra servers
  hosts: cassandra_servers
  become: true
  become_user: yjren
  tasks:
  - name: Execute script start-server.sh
    shell: |
      . /etc/profile &&
      export project_base_dir="/mnt/ssd/Test/CassandraEC" &&
      export branch_name="yuanming" &&
      export ec_data_nodes=4 &&
      export ec_data_nodes=4 &&
      export parity_nodes=2 &&
      export max_level_count=3 &&
      export concurrent_ec=64 &&
      export initial_delay=20 &&
      export task_delay=10 &&
      export stripe_update_frequency=5 &&
      export max_send_sstables=8 &&
      export enable_migration=true &&
      export enbale_erasure_coding=true &&
      export cold_period=60 &&
      export target_storage_saving=0.7 &&
      export seeds="192.168.0.21,192.168.0.22,192.168.0.23,192.168.0.25,192.168.0.26,192.168.0.28" &&
      export memtale_heap_space="1024MiB" &&
      export internode_max_message_size="32MiB" &&
      export internode_application_send_queue_capacity="256MiB" &&
      export internode_application_send_queue_reserve_endpoint_capacity="512MiB" &&
      export internode_application_send_queue_reserve_global_capacity="2048MiB" &&
      export internode_application_receive_queue_capacity="256MiB" &&
      export internode_application_receive_queue_reserve_endpoint_capacity="512MiB" &&
      export internode_application_receive_queue_reserve_global_capacity="2048MiB" &&
      bash /mnt/ssd/Test/CassandraEC/scripts/start-server.sh

    register: command_result
    ignore_errors: True
#
  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"
  - name: Wait until all nodes are ready
    pause:
      seconds: 50

- name: Setup log levels
  hosts:  cassandra_servers

  tasks:
  - name: Setup log levels
    shell: |
      . /etc/profile && cd /mnt/ssd/Test/CassandraEC && bin/nodetool setlogginglevel org.apache.cassandra debug && bin/nodetool setlogginglevel ROOT error
    register: command_result
    ignore_errors: true


- name: Prepare keyspace and tables for evaluation
  hosts: cassandra_client

  tasks:
  - name: Execute script start-client.sh
    command: sh /mnt/ssd/Test/CassandraEC/scripts/start-client.sh {{ coordinator }} {{ sstable_size_in_mb }} {{ fanout_size }} {{ file_dir }}
    vars:
      coordinator: "192.168.0.21"
      sstable_size_in_mb: 4
      fanout_size: 10
      file_dir: "/home/yjren/cassandra"
    register: command_result
    ignore_errors: True

  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"


- name: Load data
  hosts: cassandra_client

  tasks:
  - name: Execute script load.sh
    command: sh /mnt/ssd/Test/CassandraEC/scripts/load.sh {{ coordinator }} {{ record_count }} {{ filed_length }} {{ threads }} {{ file_dir }}
    vars:
      coordinator: "192.168.0.21"
      record_count: 10000000
      filed_length: 1024
      threads: 16
      file_dir: "/home/yjren/ycsb-0.17.0/"
    register: command_result
    ignore_errors: True

  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"

  - name: Wait until insertion is done
    pause:
      seconds: 60

- name: Force flush
  hosts:  cassandra_servers

  tasks:
  - name: Force flush
    shell: |
      . /etc/profile && cd /mnt/ssd/Test/CassandraEC && bin/nodetool flush
    register: command_result
    ignore_errors: true

  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"

  - name: Wait until erasure coding is done
    pause:
      seconds: 4000

- name: Run Normal Read
  hosts: cassandra_client

  tasks:
  - name: Execute run.sh
    command: sh /mnt/ssd/Test/CassandraEC/scripts/run.sh {{ coordinator }} {{ operation_count }} {{ threads }} {{ consistency }} {{ file_dir }}
    vars:
      coordinator: "192.168.0.21"
      operation_count: 500000
      threads: 16
      consistency: TWO
      file_dir: "/home/yjren/ycsb-0.17.0/"
      register: command_result
      ignore_errors: true

  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"
  - name: Wait until normal read is done
    pause:
      seconds: 60

- name: Test recovery
  hosts: server2

  tasks:
  - name: Offline a server node
    command: sh /mnt/ssd/Test/CassandraEC/scripts/recovery.sh
    register: command_result
    ignore_errors: true

  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"

  - name: Wait until killed server is found
    pause:
      seconds: 60

- name: Run Degraded Read
  hosts: cassandra_client

  tasks:
  - name: Execute run.sh
    command: sh /mnt/ssd/Test/CassandraEC/scripts/run.sh {{ coordinator }} {{ operation_count }} {{ threads }} {{ consistency }} {{ file_dir }}
    vars:
      coordinator: "192.168.0.21"
      operation_count: 500000
      threads: 16
      consistency: TWO
      file_dir: "/home/yjren/ycsb-0.17.0/"
      register: command_result
      ignore_errors: true

  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"