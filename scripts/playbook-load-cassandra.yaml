# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Rebuild and start Cassandra servers
  hosts: cassandra_servers
  become: true
  become_user: elect
  tasks:
    - name: Execute script start-server-cassandra.sh
      shell: |
        . /etc/profile &&
        export project_base_dir="/mnt/ssd/cassandra" &&
        export seeds="172.168.96.1,172.168.96.2,172.168.96.3,172.168.96.4,172.168.96.5,172.168.96.6" &&
        export memtale_heap_space="2048MiB" &&
        export internode_max_message_size="32MiB" &&
        export internode_application_send_queue_capacity="256MiB" &&
        export internode_application_send_queue_reserve_endpoint_capacity="512MiB" &&
        export internode_application_send_queue_reserve_global_capacity="2048MiB" &&
        export internode_application_receive_queue_capacity="256MiB" &&
        export internode_application_receive_queue_reserve_endpoint_capacity="512MiB" &&
        export internode_application_receive_queue_reserve_global_capacity="2048MiB" &&
        bash /mnt/ssd/CassandraEC/scripts/start-server-cassandra.sh

      register: command_result
      ignore_errors: True
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"
    - name: Wait until all nodes are ready
      pause:
        seconds: 30

- name: Setup log levels
  hosts: cassandra_servers
  tasks:
    - name: Setup log levels
      shell: |
        . /etc/profile && cd /mnt/ssd/cassandra && bin/nodetool setlogginglevel org.apache.cassandra error && bin/nodetool setlogginglevel ROOT error
      register: command_result
      ignore_errors: true

- name: Prepare keyspace and tables for loading
  hosts: cassandra_client
  tasks:
    - name: Execute script start-client-cassandra.sh
      command: sh /home/elect/CassandraEC/scripts/start-client-cassandra.sh {{ coordinator }} {{ sstable_size_in_mb }} {{ fanout_size }} {{ file_dir }}
      vars:
        coordinator: "172.168.96.1"
        sstable_size_in_mb: 4
        fanout_size: 10
        file_dir: "/home/elect/cassandra"
      register: command_result
      ignore_errors: True
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"
      
- name: Start CPU&Memory Monitor
  hosts: cassandra_servers
  become: true
  become_user: elect
  gather_facts: false
  tasks:
    - name: CPU&Memory Monitor
      shell: |
        . /etc/profile &&
        kill -9 $(ps aux | grep "stats.sh" | grep -v grep | awk 'NR == 1'  | awk {'print $2'}) &&
        nohup bash /mnt/ssd/CassandraEC/scripts/stats.sh {{ expName }} &
      vars:
        expName: "Exp#1479-Load-Cassandra-YCSB"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"

- name: Net&Disk Monitor before loading
  hosts: cassandra_servers
  tasks:
    - name: Net&Disk Monitor
      shell: |
        . /etc/profile && 
        (nohup bash /home/elect/CassandraEC/scripts/netCapture.sh {{ exp_name }} & nohup bash /home/elect/CassandraEC/scripts/diskCapture.sh {{ exp_name }} &) &
      vars:
        expName: "Exp#1479-Load-Cassandra-YCSB"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"

- name: Load data
  hosts: cassandra_client
  tasks:
    - name: Execute script load.sh
      command: sh /home/elect/CassandraEC/scripts/load.sh {{ coordinator }} {{ record_count }} {{ filed_length }} {{ threads }} {{ file_dir }} {{ workload }} {{ expName }}
      vars:
        coordinator: "172.168.96.1"
        record_count: 100000000
        filed_length: 1024
        threads: 64
        file_dir: "/home/elect/YCSB/"
        workload: "workloads/workload_template"
        expName: "Exp#1479-Load-Cassandra-YCSB"
      register: command_result
      ignore_errors: True
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"
    - name: Wait until insertion is done
      pause:
        seconds: 30

- name: Force flush and compaction
  hosts: cassandra_servers
  tasks:
    - name: Force flush
      shell: |
        . /etc/profile && cd /mnt/ssd/cassandra && bin/nodetool flush && bin/nodetool compact
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"
    - name: Wait until compaction is done
      pause:
        seconds: 30

- name: Net&Disk Monitor after loading
  hosts: cassandra_servers
  tasks:
    - name: Net&Disk Monitor
      shell: |
        . /etc/profile && 
        (nohup bash /mnt/ssd/CassandraEC/scripts/netCapture.sh {{ expName }} & nohup bash /mnt/ssd/CassandraEC/scripts/diskCapture.sh {{ expName }} &) &
      vars:
        expName: "Exp#1479-Load-Cassandra-YCSB"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"

- name: Backup data file for cold startup
  hosts: cassandra_servers
  tasks:
    - name: Copy files
      command: . /etc/profile && cp -r {{ sourceFileDir }} {{ targetFileDir }}
      vars:
        sourceFileDir: "/mnt/ssd/cassandra/data"
        targetFileDir: "/mnt/ssd/backups/cassandra/YCSB"
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"
    - name: Wait until copy is done
      pause:
        seconds: 30
