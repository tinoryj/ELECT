# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Start CPU&Memory Monitor
  hosts: elect_servers
  become: yes
  become_user: elect
  gather_facts: false
  tasks:
    - name: CPU&Memory Monitor
      shell: |
        . /etc/profile &&
        nohup bash /home/elect/ELECTExp/scripts/status/stats.sh {{ expName }} {{ stage }} > /home/elect/run.log 2>&1 &
      vars:
        expName: "SampleExpName"
        stage: "Running"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"

- name: Monitor before benchmark
  hosts: elect_servers
  become: yes
  become_user: elect
  tasks:
    - name: Monitor
      shell: |
        . /etc/profile && bash /home/elect/ELECTExp/scripts/status/stateCapture.sh {{ expName }} {{ stage }} 
      vars:
        expName: "SampleExpName"
        workload: "workload_template"
        stage: "Before-run"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"

- name: Run Normal benchmark
  hosts: elect_client
  become: yes
  become_user: elect
  tasks:
    - name: Execute runDB.sh
      command: bash /home/elect/ELECTExp/scripts/Run/runDB.sh {{ record_count }} {{ operation_count }} {{ threads }} {{ workload }} {{ expName }} {{ keyspace }} {{ consistency }} {{ trace }}
      vars:
        record_count: 10000000
        operation_count: 10000000
        threads: 64
        workload: "workload_template"
        expName: "Exp#1-Normal-Run-Cassandra-DATAPATH"
        keyspace: "ycsb"
        consistency: "ONE"
        trace: "off"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"

- name: Stop CPU&Memory Monitor
  hosts: elect_servers
  become: yes
  become_user: elect
  gather_facts: false
  tasks:
    - name: CPU&Memory Monitor
      shell: |
        . /etc/profile && bash /home/elect/ELECTExp/scripts/status/killMonitor.sh
      register: command_result
      ignore_errors: true

- name: Monitor after benchmark
  hosts: elect_servers
  become: yes
  become_user: elect
  tasks:
    - name: Monitor
      shell: |
        . /etc/profile && bash /home/elect/ELECTExp/scripts/status/stateCapture.sh {{ expName }} {{ workload }} {{ stage }}
      vars:
        expName: "Exp#1-Degraded-Run-Cassandra-DATAPATH"
        workload: "workload_template"
        stage: "After-normal-run"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"

- name: Backup Logs
  hosts: elect_servers
  become: yes
  become_user: elect
  tasks:
    - name: copy logs
      command: bash /home/elect/ELECTExp/scripts/Run/copyLogs.sh {{ record_count }} {{ operation_count }} {{ threads }} {{ workload }} {{ expName }} {{ keyspace }}
      vars:
        record_count: 10000000
        operation_count: 10000000
        threads: 64
        workload: "workload_template"
        expName: "Exp#1-Normal-Run-Cassandra-DATAPATH"
        keyspace: "ycsb"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"