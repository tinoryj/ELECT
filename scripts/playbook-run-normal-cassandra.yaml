# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Cold Startup
  hosts: cassandra_servers
  tasks:
  - name: Cold Startup
    command: sh /mnt/ssd/CassandraEC/scripts/cold-startup.sh {{ sourceFileDir }} {{ targetFileDir }} {{ binDir }}
    vars:
      sourceFileDir: "/mnt/ssd/backups/cassandra/YCSB"
      targetFileDir: "/mnt/ssd/cassandra/data"
      binDir: "/mnt/ssd/cassandra"
  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"
  - name: Wait until normal read is done
    pause:
      seconds: 60

- name: Setup log levels
  hosts: cassandra_servers
  tasks:
    - name: Setup log levels
      shell: |
        . /etc/profile && cd /mnt/ssd/cassandra && bin/nodetool setlogginglevel org.apache.cassandra error && bin/nodetool setlogginglevel ROOT error
      register: command_result
      ignore_errors: true

- name: Start CPU&Memory Monitor
  hosts: cassandra_servers
  become: true
  become_user: elect
  gather_facts: false
  tasks:
    - name: CPU&Memory Monitor
      shell: |
        . /etc/profile &&
        kill -9 $(ps aux | grep "stats.sh" | grep -v grep | awk 'NR == 1'  | awk {'print $2'}) &&
        nohup bash /mnt/ssd/CassandraEC/scripts/stats.sh {{ expName }} &
      vars:
        expName: "Exp#1-Run-Cassandra-YCSB"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"

- name: Net&Disk Monitor before normal run
  hosts: cassandra_servers
  tasks:
    - name: Net&Disk Monitor
      shell: |
        . /etc/profile && 
        (nohup bash /home/elect/CassandraEC/scripts/netCapture.sh {{ exp_name }} & nohup bash /home/elect/CassandraEC/scripts/diskCapture.sh {{ exp_name }} &) &
      vars:
        expName: "Exp#1-Normal-Run-Cassandra-YCSB"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"


- name: Run Normal Read
  hosts: cassandra_client
  tasks:
  - name: Execute run.sh
    command: sh /mnt/ssd/Test/CassandraEC/scripts/run.sh {{ coordinator }} {{ operation_count }} {{ threads }} {{ consistency }} {{ file_dir }} {{ workload }} {{ expName }}
    vars:
      coordinator: "172.168.96.1"
      operation_count: 10000000
      threads: 64
      consistency: ONE
      file_dir: "/home/elect/YCSB/"
      workload: "workloads/workload_template"
      expName: "Exp#1-Normal-Run-Cassandra-YCSB"
      register: command_result
      ignore_errors: true
  - name: Fail the play if the previous command did not succeed
    fail: msg="the command failed"
    when: "'FAILED' in command_result.stderr"

- name: Net&Disk Monitor after normal run
  hosts: cassandra_servers
  tasks:
    - name: Net&Disk Monitor
      shell: |
        . /etc/profile && 
        (nohup bash /mnt/ssd/CassandraEC/scripts/netCapture.sh {{ expName }} & nohup bash /mnt/ssd/CassandraEC/scripts/diskCapture.sh {{ expName }} &) &
      vars:
        expName: "Exp#1-Normal-Run-Cassandra-YCSB"
      register: command_result
      ignore_errors: true
    - name: Fail the play if the previous command did not succeed
      fail: msg="the command failed"
      when: "'FAILED' in command_result.stderr"
